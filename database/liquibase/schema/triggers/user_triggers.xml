<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd"> 

   <changeSet author="emtudorsm" id="oracleUserTrigger1" runOnChange="true" dbms="oracle">
     <createProcedure>
	  	create  trigger user_BI
	    before insert on user_T
	    for each row
			begin
			  if :new.user_ID is null
			  then
			    select SQ_user.nextval into :new.user_ID from dual;
			  end if;
			
			  /* Fill date and user created */
			  IF :NEW.created_on IS NULL
			  THEN
			      :NEW.created_on := SYSDATE;
			  END IF;
			
			  IF :NEW.created_by IS NULL
			  THEN
			      :NEW.created_by := UPPER(sys_context('USERENV', 'OS_USER'));
			  ELSE
			      :NEW.created_by := UPPER(:NEW.created_by);
			  END IF;
			end;
	  </createProcedure>
	  <rollback>
	  	drop trigger user_bi;
	  </rollback>
	   </changeSet>     
   
   <changeSet author="emtudorsm" id="oracleUserTrigger2"  runOnChange="true" dbms="oracle">
   	  <createProcedure>
	  	create or replace trigger user_BU
    	before update on user_T
    	for each row
		begin
		    /* Fill date and user modified */
		    IF :NEW.modified_on IS NULL OR (:NEW.modified_on = :OLD.modified_on)
		    THEN
		        :NEW.modified_on := SYSDATE;
		    END IF;
		
		    IF :NEW.modified_by IS NULL OR (:NEW.modified_by = :OLD.modified_by)
		    THEN
		        :NEW.modified_by := UPPER(sys_context('USERENV', 'OS_USER'));
		    ELSE
		        :NEW.modified_by := UPPER(:NEW.modified_by);
		    END IF;
		
		end;
	  </createProcedure>
	  <rollback>
	  	drop trigger user_bu
	  </rollback>
   </changeSet>      	

   <changeSet author="emtudorsm" id="postgresUserTrigger1"  runOnChange="true" dbms="postgresql">
   	<createProcedure>
	  	CREATE OR REPLACE FUNCTION user_BI()
			  RETURNS trigger AS
			 $BODY$
			begin
			
			  if NEW.user_id IS NULL 
				then
					begin
						NEW.user_id :=nextval('SQ_user');
					end;  
				end if;
			
			
			  IF NEW.created_on IS NULL
			  THEN
			      NEW.created_on := current_timestamp;
			  END IF;	
			
			  if NEW.created_by is NULL
			  THEN 
			    NEW.created_by :=UPPER(current_user);
			  ELSE
			  	NEW.created_by :=UPPER(NEW.created_by);  
			  END IF;  
			  RETURN NEW;	
			  EXCEPTION
			     WHEN OTHERS THEN 
			     RAISE WARNING 'user_BI: SQLSTATE %: %', SQLSTATE, SQLERRM;
			     RETURN NULL;  	
			end;$BODY$
			  LANGUAGE plpgsql VOLATILE
			  COST 100;
			
			CREATE TRIGGER user_BI BEFORE INSERT ON user_T
			    FOR EACH ROW EXECUTE PROCEDURE user_BI(); 
	   </createProcedure>
	  <rollback>
	  	drop trigger user_bi on user_t;
		drop function user_bi();
	  </rollback>
	   </changeSet>      	
   
   <changeSet author="emtudorsm" id="postgresUserTrigger2"  runOnChange="true" dbms="postgresql">
   		<createProcedure>
			  	CREATE OR REPLACE FUNCTION user_BU()
			  RETURNS trigger AS
			 $BODY$
			begin
			
			  IF NEW.modified_on IS NULL or (OLD.modified_on = OLD.modified_on)
			  THEN
			      NEW.modified_on := current_timestamp;
			  END IF;	
			
			  if NEW.modified_by is NULL or (NEW.modified_by = OLD.modified_by)
			  THEN 
			    NEW.modified_by :=UPPER(current_user);
			  ELSE
			  	NEW.modified_by :=UPPER(NEW.modified_by);  
			  END IF;  
			  RETURN NEW;	
			  EXCEPTION
			     WHEN OTHERS THEN 
			     RAISE WARNING 'user_BU: SQLSTATE %: %', SQLSTATE, SQLERRM;
			     RETURN NULL;  	
			end;$BODY$
			  LANGUAGE plpgsql VOLATILE
			  COST 100;
			
			CREATE TRIGGER user_BU BEFORE UPDATE ON user_T
			    FOR EACH ROW EXECUTE PROCEDURE user_BU(); 
   			
	  </createProcedure>
  	<rollback>
  		drop trigger user_bu on user_t;
		drop function user_bu();
  	</rollback>
   	
   </changeSet>      	
            	
</databaseChangeLog>